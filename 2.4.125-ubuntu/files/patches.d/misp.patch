diff -ru var/www/MISP.orig/app/Config/bootstrap.default.php var/www/MISP/app/Config/bootstrap.default.php
--- var/www/MISP.orig/app/Config/bootstrap.default.php	2020-09-11 13:52:08.000000000 +0000
+++ var/www/MISP/app/Config/bootstrap.default.php	2020-09-11 20:28:06.210711000 +0000
@@ -111,11 +111,14 @@
  * Configure base URL for CakePHP
  */
 if (Configure::read('MISP.baseurl')) {
-	$regex = "%^(?<fullBaseUrl>(?<proto>https?)://(?<host>(?:(?:\w|-)+\.)+[a-z]{2,5})(?::(?<port>[0-9]+))?)(?<base>/[a-z0-9_\-\.]+)?$%i";
+	$regex = "%^(?<fullBaseUrl>(?<proto>https?)://(?<host>(?:(?:\w|-)+\.)+[a-z]{2,5}|localhost)(?::(?<port>[0-9]+))?)(?<base>/[a-z0-9_\-\.]+)?$%i";
 	if (preg_match($regex, Configure::read('MISP.baseurl'), $matches)) {
 		if (isset($matches['base'])) {
 			Configure::write('App.base', $matches['base']);
 			Configure::write('App.fullBaseUrl', $matches['fullBaseUrl']);
+		} else if (isset($matches['fullBaseUrl'])) {
+			Configure::write('App.base', '');
+			Configure::write('App.fullBaseUrl', $matches['fullBaseUrl']);
 		}
 	}
 }
diff -ru var/www/MISP.orig/app/Model/Server.php var/www/MISP/app/Model/Server.php
--- var/www/MISP.orig/app/Model/Server.php	2020-09-11 13:52:09.000000000 +0000
+++ var/www/MISP/app/Model/Server.php	2020-09-11 20:18:08.240530000 +0000
@@ -3577,11 +3577,15 @@
         if ($this->testForEmpty($value) !== true) {
             return $this->testForEmpty($value);
         }
-        $regex = "%^(?<proto>https?)://(?<host>(?:(?:\w|-)+\.)+[a-z]{2,5})(?::(?<port>[0-9]+))?(?<base>/[a-z0-9_\-\.]+)?$%i";
-	if ( !preg_match($regex, $value, $matches)
-                || strtolower($matches['proto']) != strtolower($this->getProto())
-                || strtolower($matches['host']) != strtolower($this->getHost()) ) {
-            return 'Invalid baseurl, it has to be in the "https://FQDN" format.';
+        $regex = "%^(?<proto>https?)://(?<host>(?:(?:(?:\w|-)+\.)+[a-z]{1,5}|localhost)(?::(?<port>[0-9]+))?)(?<base>/[a-z0-9_\-\.]+)?$%i";
+        if ( !preg_match($regex, $value, $matches) ) {
+                return 'URL does not match pattern. url='.$value;
+        }
+        if ( strtolower($matches['proto']) != strtolower($this->getProto()) ) {
+                return 'URL has invalid proto: found='.$matches['proto'].' expected='.strtolower($this->getProto());
+        }
+        if ( strtolower($matches['host']) != strtolower($this->getHost()) ) {
+                return 'URL has invalid host: found='.$matches['host'].' expected='.strtolower($this->getHost());
         }
         return true;
     }
diff -ru var/www/MISP.orig/app/files/scripts/stix2/stix2misp.py var/www/MISP/app/files/scripts/stix2/stix2misp.py
--- var/www/MISP.orig/app/files/scripts/stix2/stix2misp.py	2020-09-11 22:50:37.000000000 +0000
+++ var/www/MISP/app/files/scripts/stix2/stix2misp.py	2020-09-11 23:13:31.134214000 +0000
@@ -23,7 +23,7 @@
 import io
 import stix2
 import stix2misp_mapping
-from collections import defaultdict
+from collections import defaultdict, OrderedDict
 from copy import deepcopy
 from pathlib import Path
 _misp_dir = Path(os.path.realpath(__file__)).parents[4]
@@ -100,7 +100,7 @@
         try:
             self.report[report['id'].split('--')[1]] = report
         except AttributeError:
-            self.report = {report['id'].split('--')[1]: report}
+            self.report = OrderedDict({report['id'].split('--')[1]: report})
 
     def _load_synonyms_to_tag_names(self):
         with open(self._synonyms_to_tag_names, 'rt', encoding='utf-8') as f:
@@ -243,11 +243,11 @@
                         break
 
     def parse_report(self, event_uuid=None):
-        event_infos = set()
+        event_info = None
         self.misp_event.uuid = event_uuid if event_uuid and len(self.report) > 1 else tuple(self.report.keys())[0]
         for report in self.report.values():
-            if hasattr(report, 'name') and report.name:
-                event_infos.add(report.name)
+            if hasattr(report, 'name') and report.name and event_info is None:
+                event_info = report.name
             if hasattr(report, 'labels') and report.labels:
                 for label in report.labels:
                     self.tags.add(label)
@@ -262,10 +262,12 @@
             if hasattr(report, 'external_references'):
                 for reference in report.external_references:
                     self.misp_event.add_attribute(**{'type': 'link', 'value': reference['url']})
-        if len(event_infos) == 1:
-            self.misp_event.info = event_infos.pop()
+        if event_info is not None:
+            self.misp_event.info = event_info
         else:
-            self.misp_event.info = f'Imported with MISP import script for {self.stix_version}'
+            version = self.stix_version
+            filename = os.path.basename(self.filename)
+            self.misp_event.info = f'Imported with MISP import script for {version} from {filename}'
 
     @staticmethod
     def _parse_user_account_groups(groups):
