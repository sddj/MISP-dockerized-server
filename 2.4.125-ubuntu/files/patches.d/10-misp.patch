diff --git a/INSTALL/MYSQL.sql b/INSTALL/MYSQL.sql
index 284128120..2b3e70ca8 100644
--- a/INSTALL/MYSQL.sql
+++ b/INSTALL/MYSQL.sql
@@ -68,6 +68,16 @@ CREATE TABLE IF NOT EXISTS `attributes` (
   UNIQUE INDEX `uuid` (`uuid`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
 
+
+CREATE TABLE IF NOT EXISTS `attachments` (
+    `id` int(11) PRIMARY KEY AUTO_INCREMENT,
+    `attribute_id` int(11) NOT NULL,
+    `event_id` int(11) NOT NULL,
+    `data` mediumtext,
+    UNIQUE (`attribute_id`, `event_id`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
+
+
 -- -------------------------------------------------------
 
 --
@@ -462,6 +472,16 @@ CREATE TABLE IF NOT EXISTS `galaxy_clusters` (
   `source` varchar(255) COLLATE utf8_bin NOT NULL DEFAULT '',
   `authors` text COLLATE utf8_bin NOT NULL,
   `version` int(11) DEFAULT 0,
+  `distribution` tinyint(4) NOT NULL DEFAULT 0,
+  `sharing_group_id` int(11),
+  `org_id` int(11) NOT NULL,
+  `orgc_id` int(11) NOT NULL,
+  `default` tinyint(1) NOT NULL DEFAULT 0,
+  `locked` tinyint(1) NOT NULL DEFAULT 0,
+  `extends_uuid` varchar(40) COLLATE utf8_bin DEFAULT '',
+  `extends_version` int(11) DEFAULT 0,
+  `published` tinyint(1) NOT NULL DEFAULT 0,
+  `deleted` TINYINT(1) NOT NULL DEFAULT 0,
   PRIMARY KEY (id),
   INDEX `value` (`value`(255)),
   INDEX `uuid` (`uuid`),
@@ -492,22 +512,40 @@ CREATE TABLE IF NOT EXISTS `galaxy_elements` (
 -- -------------------------------------------------------
 
 --
--- Table structure for `galaxy_reference`
+-- Table structure for `galaxy_cluster_relations`
 --
 
-CREATE TABLE IF NOT EXISTS `galaxy_reference` (
+CREATE TABLE IF NOT EXISTS `galaxy_cluster_relations` (
   `id` int(11) NOT NULL AUTO_INCREMENT,
   `galaxy_cluster_id` int(11) NOT NULL,
   `referenced_galaxy_cluster_id` int(11) NOT NULL,
   `referenced_galaxy_cluster_uuid` varchar(255) COLLATE utf8_bin NOT NULL,
   `referenced_galaxy_cluster_type` text COLLATE utf8_bin NOT NULL,
-  `referenced_galaxy_cluster_value` text COLLATE utf8_bin NOT NULL,
+  `galaxy_cluster_uuid` varchar(40) COLLATE utf8_bin NOT NULL,
+  `distribution` tinyint(4) NOT NULL DEFAULT 0,
+  `sharing_group_id` int(11),
+  `default` tinyint(1) NOT NULL DEFAULT 0,
   PRIMARY KEY (id),
   INDEX `galaxy_cluster_id` (`galaxy_cluster_id`),
   INDEX `referenced_galaxy_cluster_id` (`referenced_galaxy_cluster_id`),
-  INDEX `referenced_galaxy_cluster_value` (`referenced_galaxy_cluster_value`(255)),
   INDEX `referenced_galaxy_cluster_type` (`referenced_galaxy_cluster_type`(255))
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
 
+CREATE TABLE IF NOT EXISTS `galaxy_cluster_relation_tags` (
+  `id` int(11) NOT NULL AUTO_INCREMENT,
+  `galaxy_cluster_relation_id` int(11) NOT NULL,
+  `tag_id` int(11) NOT NULL,
+  PRIMARY KEY (`id`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+CREATE TABLE IF NOT EXISTS `galaxy_cluster_blocklists` (
+  `id` int(11) NOT NULL AUTO_INCREMENT,
+  `cluster_uuid` varchar(40) COLLATE utf8_bin NOT NULL,
+  `created` datetime NOT NULL,
+  `cluster_info` TEXT CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
+  `comment` TEXT CHARACTER SET utf8 COLLATE utf8_unicode_ci,
+  `cluster_orgc` VARCHAR(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
+  PRIMARY KEY (`id`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
 
 CREATE TABLE IF NOT EXISTS inbox (
@@ -906,6 +944,7 @@ CREATE TABLE IF NOT EXISTS `roles` (
   `perm_decaying` tinyint(1) NOT NULL DEFAULT 0,
   `enforce_rate_limit` tinyint(1) NOT NULL DEFAULT 0,
   `rate_limit_count` int(11) NOT NULL DEFAULT 0,
+  `perm_galaxy_editor` tinyint(1) NOT NULL DEFAULT 0,
   PRIMARY KEY (`id`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
 
@@ -924,6 +963,8 @@ CREATE TABLE IF NOT EXISTS `servers` (
   `push` tinyint(1) NOT NULL,
   `pull` tinyint(1) NOT NULL,
   `push_sightings` tinyint(1) NOT NULL DEFAULT 0,
+  `push_galaxy_clusters` tinyint(1) NOT NULL DEFAULT 0,
+  `pull_galaxy_clusters` tinyint(1) NOT NULL DEFAULT 0,
   `lastpulledid` int(11) DEFAULT NULL,
   `lastpushedid` int(11) DEFAULT NULL,
   `organization` varchar(10) COLLATE utf8_bin DEFAULT NULL,
@@ -934,7 +975,9 @@ CREATE TABLE IF NOT EXISTS `servers` (
   `pull_rules` text COLLATE utf8_bin NOT NULL,
   `push_rules` text COLLATE utf8_bin NOT NULL,
   `cert_file` varchar(255) COLLATE utf8_bin DEFAULT NULL,
+  `cert_content` text DEFAULT NULL,
   `client_cert_file` varchar(255) COLLATE utf8_bin DEFAULT NULL,
+  `client_cert_content` text DEFAULT NULL,
   `internal` tinyint(1) NOT NULL DEFAULT 0,
   `skip_proxy` tinyint(1) NOT NULL DEFAULT 0,
   `caching_enabled` tinyint(1) NOT NULL DEFAULT 0,
@@ -948,7 +991,7 @@ CREATE TABLE IF NOT EXISTS `servers` (
 -- --------------------------------------------------------
 
 --
--- Table structure for table ``)ributes`
+-- Table structure for table `shadow_attributes`
 --
 
 CREATE TABLE IF NOT EXISTS `shadow_attributes` (
@@ -1165,6 +1208,8 @@ CREATE TABLE IF NOT EXISTS `tags` (
   `user_id` int(11) NOT NULL DEFAULT 0,
   `hide_tag` tinyint(1) NOT NULL DEFAULT 0,
   `numerical_value` int(11) NULL,
+  `is_galaxy` tinyint(1) NOT NULL DEFAULT 0,
+  `is_custom_galaxy` tinyint(1) NOT NULL DEFAULT 0,
   PRIMARY KEY (`id`),
   INDEX `name` (`name`(255)),
   INDEX `org_id` (`org_id`),
@@ -1473,12 +1518,32 @@ CREATE TABLE IF NOT EXISTS `warninglist_types` (
 
 -- --------------------------------------------------------
 
+CREATE TABLE IF NOT EXISTS `cerebrates` (
+  `id` int(11) NOT NULL AUTO_INCREMENT,
+  `name` varchar(191) NOT NULL,
+  `url` varchar(255) NOT NULL,
+  `authkey` varchar(40) CHARACTER SET ascii COLLATE ascii_general_ci NULL,
+  `open` tinyint(1) DEFAULT 0,
+  `org_id` int(11) NOT NULL,
+  `pull_orgs` tinyint(1) DEFAULT 0,
+  `pull_sharing_groups` tinyint(1) DEFAULT 0,
+  `self_signed` tinyint(1) DEFAULT 0,
+  `cert_file` varchar(255) DEFAULT NULL,
+  `client_cert_file` varchar(255) DEFAULT NULL,
+  `internal` tinyint(1) NOT NULL DEFAULT 0,
+  `skip_proxy` tinyint(1) NOT NULL DEFAULT 0,
+  `description` text,
+  PRIMARY KEY (`id`),
+  KEY `url` (`url`),
+  KEY `org_id` (`org_id`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
+
 --
 -- Default values for initial installation
 --
 
 INSERT IGNORE INTO `admin_settings` (`id`, `setting`, `value`) VALUES
-(1, 'db_version', '61');
+(1, 'db_version', '64');
 
 INSERT IGNORE INTO `feeds` (`id`, `provider`, `name`, `url`, `distribution`, `default`, `enabled`) VALUES
 (1, 'CIRCL', 'CIRCL OSINT Feed', 'https://www.circl.lu/doc/misp/feed-osint', 3, 1, 0),
diff --git a/INSTALL/MYSQL.upgrade.sql b/INSTALL/MYSQL.upgrade.sql
new file mode 100644
index 000000000..65d3e4314
--- /dev/null
+++ b/INSTALL/MYSQL.upgrade.sql
@@ -0,0 +1,15 @@
+ALTER TABLE `servers`
+    ADD COLUMN `client_cert_content` text DEFAULT NULL;
+ALTER TABLE `servers`
+    ADD COLUMN `cert_content` text DEFAULT NULL;
+
+CREATE TABLE IF NOT EXISTS `attachments`
+(
+    `id`           int(11) PRIMARY KEY AUTO_INCREMENT,
+    `attribute_id` int(11) NOT NULL,
+    `event_id`     int(11) NOT NULL,
+    `data`         mediumtext,
+    UNIQUE (`attribute_id`, `event_id`)
+) ENGINE = InnoDB
+  DEFAULT CHARSET = utf8
+  COLLATE = utf8_bin;
\ No newline at end of file
diff --git a/PyMISP b/PyMISP
index 357096f24..51edb8ab3 160000
--- a/PyMISP
+++ b/PyMISP
@@ -1 +1 @@
-Subproject commit 357096f24c4f8d7dac87dfe0b9edad4f924f27a3
+Subproject commit 51edb8ab33c5ee6bd3b9b05ea5809299f37c4fbe
diff --git a/app/Controller/ServersController.php b/app/Controller/ServersController.php
index 77575b598..350f3592a 100644
--- a/app/Controller/ServersController.php
+++ b/app/Controller/ServersController.php
@@ -876,10 +876,12 @@ class ServersController extends AppController
         if ($client) {
             $subm = 'submitted_client_cert';
             $attr = 'client_cert_file';
+            $contentStore = 'client_cert_content';
             $ins  = '_client';
         } else {
             $subm = 'submitted_cert';
             $attr = 'cert_file';
+            $contentStore = 'cert_content';
             $ins  = '';
         }
         if (!$delete) {
@@ -912,6 +914,7 @@ class ServersController extends AppController
             $pemfile = new File($destpath . $id . $ins . '.' . $ext);
             $result = $pemfile->write($pemData);
             $s = $this->Server->read(null, $id);
+            $s['Server'][$contentStore] = $pemData;
             $s['Server'][$attr] = $s['Server']['id'] . $ins . '.' . $ext;
             if ($result) {
                 $this->Server->save($s);
@@ -919,6 +922,7 @@ class ServersController extends AppController
         } else {
             $s = $this->Server->read(null, $id);
             $s['Server'][$attr] = '';
+            $s['Server'][$contentStore] = null;
             $this->Server->save($s);
         }
         return true;
diff --git a/app/Lib/Tools/AttachmentTool.php b/app/Lib/Tools/AttachmentTool.php
index 5630844fe..3be5641a8 100644
--- a/app/Lib/Tools/AttachmentTool.php
+++ b/app/Lib/Tools/AttachmentTool.php
@@ -1,5 +1,6 @@
 <?php
 App::uses('AWSS3Client', 'Tools');
+App::uses('Attachment', 'Models');
 
 class AttachmentTool
 {
@@ -8,6 +9,19 @@ class AttachmentTool
 
     /** @var AWSS3Client */
     private $s3client;
+    private $Attachment;
+    private $storageBackend;
+
+    public function __construct() {
+        $this->Attachment = ClassRegistry::init('AttributeAttachment');
+        if ($this->attachmentDirIsS3()) {
+            $this->storageBackend = 's3';
+        } else if ($this->attachmentDirIsDb()) {
+            $this->storageBackend = 'db';
+        } else {
+            $this->storageBackend = 'file';
+        }
+    }
 
     /**
      * @param int $eventId
@@ -33,6 +47,21 @@ class AttachmentTool
         return $this->_exists(true, $eventId, $attributeId, $path_suffix);
     }
 
+    /**
+     * @param $op
+     * @param $eventId
+     * @param $attributeId
+     * @return array|int|null
+     */
+    public function getDatabaseAttachment($op, $eventId, $attributeId) {
+        return $this->Attachment->find($op, array(
+            'conditions' => array(
+                'AttributeAttachment.event_id' => $eventId,
+                'AttributeAttachment.attribute_id' => $attributeId
+            )
+        ));
+    }
+
     /**
      * @param bool $shadow
      * @param int $eventId
@@ -43,19 +72,26 @@ class AttachmentTool
      */
     protected function _exists($shadow, $eventId, $attributeId, $path_suffix = '')
     {
-        if ($this->attachmentDirIsS3()) {
-            $s3 = $this->loadS3Client();
-            $path = $this->getPath($shadow, $eventId, $attributeId, $path_suffix);
-            return $s3->exist($path);
-        } else {
-            try {
-                $this->_getFile($shadow, $eventId, $attributeId, $path_suffix);
-            } catch (NotFoundException $e) {
-                return false;
-            }
+        switch ($this->storageBackend) {
+            case 's3':
+                $s3 = $this->loadS3Client();
+                $path = $this->getPath($shadow, $eventId, $attributeId, $path_suffix);
+                $r = $s3->exist($path);
+                break;
+            case 'db':
+                $r = $this->getDatabaseAttachment('count', $eventId, $attributeId) > 0;
+                break;
+            default:
+                try {
+                    $this->_getFile($shadow, $eventId, $attributeId, $path_suffix);
+                    $r = true;
+                } catch (NotFoundException $e) {
+                    $r = false;
+                }
+                break;
         }
 
-        return true;
+        return $r;
     }
 
     /**
@@ -92,18 +128,26 @@ class AttachmentTool
      */
     protected function _getContent($shadow, $eventId, $attributeId, $path_suffix = '')
     {
-        if ($this->attachmentDirIsS3()) {
-            $s3 = $this->loadS3Client();
-            $path = $this->getPath($shadow, $eventId, $attributeId, $path_suffix);
-            return $s3->download($path);
-        } else {
-            $file = $this->_getFile($shadow, $eventId, $attributeId, $path_suffix);
-            $result = $file->read();
-            if ($result === false) {
-                throw new Exception("Could not read file '{$file->path}'.");
-            }
-            return $result;
+        switch ($this->storageBackend) {
+            case 's3':
+                $s3 = $this->loadS3Client();
+                $path = $this->getPath($shadow, $eventId, $attributeId, $path_suffix);
+                $r = $s3->download($path);
+                break;
+            case 'db':
+                $r = $this->getDatabaseAttachment('first', $eventId, $attributeId)['AttributeAttachment']['data'];
+                break;
+            default:
+                $file = $this->_getFile($shadow, $eventId, $attributeId, $path_suffix);
+                $result = $file->read();
+                if ($result === false) {
+                    throw new Exception("Could not read file '{$file->path}'.");
+                }
+                $r = $result;
+                break;
         }
+
+        return $r;
     }
 
     /**
@@ -142,21 +186,35 @@ class AttachmentTool
     {
         $path = $this->getPath($shadow, $eventId, $attributeId, $pathSuffix);
 
-        if ($this->attachmentDirIsS3()) {
-            $s3 = $this->loadS3Client();
-            $content = $s3->download($path);
-
-            $file = new File($this->tempFileName());
-            if (!$file->write($content)) {
-                throw new Exception("Could not write temporary file '{$file->path}'.");
-            }
-
-        } else {
-            $filepath = $this->attachmentDir() . DS . $path;
-            $file = new File($filepath);
-            if (!$file->exists()) {
-                throw new NotFoundException("File '$filepath' does not exists.");
-            }
+        switch ($this->storageBackend) {
+            case 's3':
+                $s3 = $this->loadS3Client();
+                $content = $s3->download($path);
+                $file = new File($this->tempFileName());
+                register_shutdown_function(function() use($file) {
+                    $file->delete();
+                });
+                if (!$file->write($content)) {
+                    throw new Exception("Could not write temporary file '{$file->path}'.");
+                }
+                break;
+            case 'db':
+                $data = $this->getDatabaseAttachment("first", $eventId, $attributeId)["AttributeAttachment"]["data"];
+                $file = new File($this->tempFileName(), true);
+                register_shutdown_function(function() use($file) {
+                    $file->delete();
+                });
+                if (!$data || !$file->write($data)) {
+                    throw new Exception("Could not write temporary file '{$file->path}'.");
+                }
+                break;
+            default:
+                $filepath = $this->attachmentDir() . DS . $path;
+                $file = new File($filepath);
+                if (!$file->exists()) {
+                    throw new NotFoundException("File '$filepath' does not exists.");
+                }
+                break;
         }
 
         return $file;
@@ -201,16 +259,28 @@ class AttachmentTool
     {
         $path = $this->getPath($shadow, $eventId, $attributeId, $pathSuffix);
 
-        if ($this->attachmentDirIsS3()) {
-            $s3 = $this->loadS3Client();
-            $s3->upload($path, $data);
-
-        } else {
-            $path = $this->attachmentDir() . DS . $path;
-            $file = new File($path, true);
-            if (!$file->write($data)) {
-                throw new Exception("Could not save attachment to file '$path'.");
-            }
+        switch ($this->storageBackend) {
+            case 's3':
+                $s3 = $this->loadS3Client();
+                $s3->upload($path, $data);
+                break;
+            case 'db':
+                $this->Attachment->create();
+                $this->Attachment->save(array(
+                    'AttributeAttachment' => array(
+                        'event_id' => $eventId,
+                        'attribute_id' => $attributeId,
+                        'data' => $data
+                    )
+                ));
+                break;
+            default:
+                $path = $this->attachmentDir() . DS . $path;
+                $file = new File($path, true);
+                if (!$file->write($data)) {
+                    throw new Exception("Could not save attachment to file '$path'.");
+                }
+                break;
         }
 
         return true;
@@ -250,23 +320,35 @@ class AttachmentTool
      */
     protected function _delete($shadow, $eventId, $attributeId, $pathSuffix = '')
     {
-        if ($this->attachmentDirIsS3()) {
-            $s3 = $this->loadS3Client();
-            $path = $this->getPath($shadow, $eventId, $attributeId, $pathSuffix);
-            $s3->delete($path);
-        } else {
-            try {
-                $file = $this->_getFile($shadow, $eventId, $attributeId, $pathSuffix);
-            } catch (NotFoundException $e) {
-                return false;
-            }
+        switch ($this->storageBackend) {
+            case 's3':
+                $s3 = $this->loadS3Client();
+                $path = $this->getPath($shadow, $eventId, $attributeId, $pathSuffix);
+                $s3->delete($path);
+                $r = true;
+                break;
+            case 'db':
+                $this->Attachment->deleteAll(array(
+                    'AttributeAttachment.event_id' => $eventId,
+                    'AttributeAttachment.attribute_id' => $attributeId
+                    ), false);
+                $r = true;
+                break;
+            default:
+                try {
+                    $file = $this->_getFile($shadow, $eventId, $attributeId, $pathSuffix);
+                    $r = true;
+                } catch (NotFoundException $e) {
+                    $r = false;
+                }
 
-            if (!$file->delete()) {
-                throw new Exception(__('Delete of file attachment failed. Please report to administrator.'));
-            }
+                if ($r && !$file->delete()) {
+                    throw new Exception(__('Delete of file attachment failed. Please report to administrator.'));
+                }
+                break;
         }
 
-        return true;
+        return $r;
     }
 
     /**
@@ -278,18 +360,24 @@ class AttachmentTool
      */
     public function deleteAll($eventId)
     {
-        if ($this->attachmentDirIsS3()) {
-            $s3 = $this->loadS3Client();
-            $s3->deleteDirectory($eventId);
-        } else {
-            $dirPath = $this->attachmentDir();
-
-            foreach (array($dirPath, $dirPath . DS . 'shadow') as $dirPath) {
-                $folder = new Folder($dirPath . DS . $eventId);
-                if ($folder->pwd() && !$folder->delete()) {
-                    throw new Exception("Delete of directory '{$folder->pwd()}' failed: " . implode(', ', $folder->errors()));
+        switch ($this->storageBackend) {
+            case 's3':
+                $s3 = $this->loadS3Client();
+                $s3->deleteDirectory($eventId);
+                break;
+            case 'db':
+                $this->Attachment->deleteAll(array('AttributeAttachment.event_id' => $eventId), false);
+                break;
+            default:
+                $dirPath = $this->attachmentDir();
+
+                foreach (array($dirPath, $dirPath . DS . 'shadow') as $dirPath) {
+                    $folder = new Folder($dirPath . DS . $eventId);
+                    if ($folder->pwd() && !$folder->delete()) {
+                        throw new Exception("Delete of directory '{$folder->pwd()}' failed: " . implode(', ', $folder->errors()));
+                    }
                 }
-            }
+                break;
         }
 
         return true;
@@ -428,6 +516,11 @@ class AttachmentTool
         return substr(Configure::read('MISP.attachments_dir'), 0, 2) === "s3";
     }
 
+    private function attachmentDirIsDb()
+    {
+        return Configure::read('MISP.attachments_dir') === "database";
+    }
+
     /**
      * @return AWSS3Client
      */
diff --git a/app/Lib/Tools/SyncTool.php b/app/Lib/Tools/SyncTool.php
index b59a192b6..39a6853c1 100644
--- a/app/Lib/Tools/SyncTool.php
+++ b/app/Lib/Tools/SyncTool.php
@@ -1,5 +1,7 @@
 <?php
 
+App::uses('FileAccessTool', 'Tools');
+
 class SyncTool
 {
     /**
@@ -14,11 +16,13 @@ class SyncTool
     {
         $params = ['compress' => true];
         if (!empty($server)) {
-            if (!empty($server[$model]['cert_file'])) {
+            if (!empty($server[$model]['cert_file']) && !empty($server[$model]['cert_content'])) {
                 $params['ssl_cafile'] = APP . "files" . DS . "certs" . DS . $server[$model]['id'] . '.pem';
+                (new FileAccessTool())->writeToFile($params['ssl_cafile'], $server[$model]['cert_content']);
             }
-            if (!empty($server[$model]['client_cert_file'])) {
+            if (!empty($server[$model]['client_cert_file']) && !empty($server[$model]['client_cert_content'])) {
                 $params['ssl_local_cert'] = APP . "files" . DS . "certs" . DS . $server[$model]['id'] . '_client.pem';
+                (new FileAccessTool())->writeToFile($params['ssl_local_cert'], $server[$model]['client_cert_content']);
             }
             if (!empty($server[$model]['self_signed'])) {
                 $params['ssl_allow_self_signed'] = true;
@@ -79,6 +83,10 @@ class SyncTool
             return;
         }
 
+        if (!empty($server['Server']['client_cert_content'])) {
+            return self::getClientCertificateInfo($server['Server']['client_cert_content']);
+        }
+
         $clientCertificate = new File(APP . "files" . DS . "certs" . DS . $server['Server']['id'] . '_client.pem');
         if (!$clientCertificate->exists()) {
             throw new Exception("Certificate file '{$clientCertificate->pwd()}' doesn't exists.");
diff --git a/app/Model/AppModel.php b/app/Model/AppModel.php
index 08bb47bc5..070b44797 100644
--- a/app/Model/AppModel.php
+++ b/app/Model/AppModel.php
@@ -1487,7 +1487,7 @@ class AppModel extends Model
                 $sqlArray[] = "ALTER TABLE `galaxy_clusters` ADD `extends_uuid` varchar(40) COLLATE utf8_bin DEFAULT '';";
                 $sqlArray[] = "ALTER TABLE `galaxy_clusters` ADD `extends_version` int(11) DEFAULT 0;";
                 $sqlArray[] = "ALTER TABLE `galaxy_clusters` ADD `published` tinyint(1) NOT NULL DEFAULT 0;";
-                $sqlArray[] = "ALTER TABLE `galaxy_clusters` ADD `deleted` TINYINT(1) NOT NULL DEFAULT 0";
+                $sqlArray[] = "ALTER TABLE `galaxy_clusters` ADD `deleted` TINYINT(1) NOT NULL DEFAULT 0;";
                 $sqlArray[] = "ALTER TABLE `roles` ADD `perm_galaxy_editor` tinyint(1) NOT NULL DEFAULT 0;";
 
                 $sqlArray[] = "UPDATE `roles` SET `perm_galaxy_editor`=1 WHERE `perm_tag_editor`=1;";
@@ -1567,6 +1567,15 @@ class AppModel extends Model
                     PRIMARY KEY (`id`),
                     INDEX `value` (`value`(255))
                 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;";
+                $sqlArray[] = "ALTER TABLE `servers` ADD COLUMN `client_cert_content` text DEFAULT NULL;";
+                $sqlArray[] = "ALTER TABLE `servers` ADD COLUMN `cert_content` text DEFAULT NULL;";
+                $sqlArray[] = "CREATE TABLE IF NOT EXISTS `attachments` (
+                    `id`           int(11) PRIMARY KEY AUTO_INCREMENT,
+                    `attribute_id` int(11) NOT NULL,
+                    `event_id`     int(11) NOT NULL,
+                    `data`         mediumtext,
+                    UNIQUE (`attribute_id`, `event_id`)
+                ) ENGINE = InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;";
                 break;
             case 66:
                 $sqlArray[] = "ALTER TABLE `galaxy_clusters` MODIFY COLUMN `tag_name` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '';";
diff --git a/app/Model/AttributeAttachment.php b/app/Model/AttributeAttachment.php
new file mode 100644
index 000000000..1b352165a
--- /dev/null
+++ b/app/Model/AttributeAttachment.php
@@ -0,0 +1,10 @@
+<?php
+
+App::uses('AppModel', 'Model');
+
+
+class AttributeAttachment extends AppModel
+{
+    public $name = 'Attachment';
+    public $useTable = 'attachments';
+}
\ No newline at end of file
diff --git a/app/Model/Server.php b/app/Model/Server.php
index 16f7ca679..25bc19560 100644
--- a/app/Model/Server.php
+++ b/app/Model/Server.php
@@ -1,6 +1,8 @@
 <?php
 App::uses('AppModel', 'Model');
 App::uses('GpgTool', 'Tools');
+App::uses('AWSS3Client', 'Tools');
+
 
 /**
  * @property-read array $serverSettings
@@ -1593,6 +1595,20 @@ class Server extends AppModel
 
     public function testForWritableDir($value)
     {
+        if ($value === 'database') {
+            try {
+                $this->query("show columns from attachments");
+                return true;
+            } catch (Exception $err) {
+                return "Unable to save to database: " . $err;
+            }
+        }
+        if (substr($value, 0, 5) === "s3://") {
+            $client = new AWSS3Client();
+            $client->initTool();
+            $resp = $client->headBucket(substr($value, 5));
+            return True;
+        }
         if (substr($value, 0, 7) === "phar://") {
             return 'Phar protocol not allowed.';
         }
diff --git a/app/files/misp-galaxy b/app/files/misp-galaxy
index ef9989dbe..eba33a1c9 160000
--- a/app/files/misp-galaxy
+++ b/app/files/misp-galaxy
@@ -1 +1 @@
-Subproject commit ef9989dbe85d798b62ebfb8acfe23559292cde6f
+Subproject commit eba33a1c91c59b41dd9bc58d80ed3a1e54cdb2e1
diff --git a/app/files/misp-objects b/app/files/misp-objects
index 4b88a52cf..e1f01f674 160000
--- a/app/files/misp-objects
+++ b/app/files/misp-objects
@@ -1 +1 @@
-Subproject commit 4b88a52cf4ac34b1ee23eaefe95aa9389a130b73
+Subproject commit e1f01f674fbaeb5f5af13b15f9b87ede9bcc1291
diff --git a/app/files/scripts/stix2/stix2misp.py b/app/files/scripts/stix2/stix2misp.py
index b44e86121..2efb8dd88 100644
--- a/app/files/scripts/stix2/stix2misp.py
+++ b/app/files/scripts/stix2/stix2misp.py
@@ -15,7 +15,7 @@
 #
 #    You should have received a copy of the GNU Affero General Public License
 #    along with this program.  If not, see <http://www.gnu.org/licenses/>.
-
+import re
 import sys
 import json
 import os
@@ -56,6 +56,7 @@ class StixParser():
         self.tags = set()
         self.galaxy = {}
         self.marking_definition = {}
+        self.report = {}
 
     def handler(self, event, filename, args):
         self.filename = filename
@@ -240,11 +241,11 @@ class StixParser():
                         break
 
     def parse_report(self, event_uuid=None):
-        event_infos = set()
+        event_info = None
         self.misp_event.uuid = event_uuid if event_uuid and len(self.report) > 1 else tuple(self.report.keys())[0]
         for report in self.report.values():
-            if hasattr(report, 'name') and report.name:
-                event_infos.add(report.name)
+            if hasattr(report, 'name') and report.name and not event_info:
+                event_info = report.name
             if hasattr(report, 'labels') and report.labels:
                 for label in report.labels:
                     self.tags.add(label)
@@ -259,10 +260,8 @@ class StixParser():
             if hasattr(report, 'external_references'):
                 for reference in report.external_references:
                     self.misp_event.add_attribute(**{'type': 'link', 'value': reference['url']})
-        if len(event_infos) == 1:
-            self.misp_event.info = event_infos.pop()
-        else:
-            self.misp_event.info = f'Imported with MISP import script for {self.stix_version}'
+        self.misp_event.info = event_info or \
+                               f'Imported with MISP import script for {self.stix_version} from {os.path.basename(self.filename)}'
 
     @staticmethod
     def _parse_user_account_groups(groups):
@@ -1987,9 +1986,9 @@ class ExternalStixParser(StixParser):
     def get_type_and_value_from_pattern(pattern):
         pattern = pattern.strip('[]')
         try:
-            pattern_type, pattern_value = pattern.split(' = \'')
+            pattern_type, pattern_value = re.split(r" (?:=|LIKE) '", pattern)
         except ValueError:
-            pattern_type, pattern_value = pattern.split('=')
+            pattern_type, pattern_value = re.split(r"(?:=|LIKE)", pattern)
         return pattern_type.strip(), pattern_value.strip("'")
 
     def handle_import_case(self, stix_object, attributes, name, _force_object=False):
@@ -2050,7 +2049,7 @@ def from_misp(stix_objects):
 def main(args):
     filename = Path(os.path.dirname(args[0]), args[1])
     with open(filename, 'rt', encoding='utf-8') as f:
-        event = stix2.parse(f.read(), allow_custom=True, interoperability=True)
+        event = stix2.parse(f.read(), allow_custom=True)
     stix_parser = StixFromMISPParser() if from_misp(event.objects) else ExternalStixParser()
     stix_parser.handler(event, filename, args[2:])
     stix_parser.save_file()
diff --git a/app/files/warninglists b/app/files/warninglists
index c2400b392..43592376c 160000
--- a/app/files/warninglists
+++ b/app/files/warninglists
@@ -1 +1 @@
-Subproject commit c2400b392a85fae1ae0c92cbde4ca510b23b6189
+Subproject commit 43592376c030195575976ae33594487d10c40a9f
diff --git a/db_schema.json b/db_schema.json
index 2ab2ffe0c..0ad71ed22 100644
--- a/db_schema.json
+++ b/db_schema.json
@@ -5134,6 +5134,28 @@
                 "column_type": "int(11)",
                 "column_default": "0",
                 "extra": ""
+            },
+            {
+                "column_name": "client_cert_content",
+                "is_nullable": "YES",
+                "data_type": "text",
+                "character_maximum_length": "65535",
+                "numeric_precision": null,
+                "collation_name": "utf8_bin",
+                "column_type": "text",
+                "column_default": null,
+                "extra": ""
+            },
+            {
+                "column_name": "cert_content",
+                "is_nullable": "YES",
+                "data_type": "text",
+                "character_maximum_length": "65535",
+                "numeric_precision": null,
+                "collation_name": "utf8_bin",
+                "column_type": "text",
+                "column_default": null,
+                "extra": ""
             }
         ],
         "shadow_attributes": [
@@ -7545,6 +7567,52 @@
                 "column_default": null,
                 "extra": ""
             }
+        ],
+        "attachments": [
+            {
+                "column_name": "id",
+                "is_nullable": "NO",
+                "data_type": "int",
+                "character_maximum_length": null,
+                "numeric_precision": "10",
+                "collation_name": null,
+                "column_type": "int(11)",
+                "column_default": null,
+                "extra": "auto_increment"
+            },
+            {
+                "column_name": "attribute_id",
+                "is_nullable": "NO",
+                "data_type": "int",
+                "character_maximum_length": null,
+                "numeric_precision": "10",
+                "collation_name": null,
+                "column_type": "int(11)",
+                "column_default": null,
+                "extra": ""
+            },
+            {
+                "column_name": "event_id",
+                "is_nullable": "NO",
+                "data_type": "int",
+                "character_maximum_length": null,
+                "numeric_precision": "10",
+                "collation_name": null,
+                "column_type": "int(11)",
+                "column_default": null,
+                "extra": ""
+            },
+            {
+                "column_name": "data",
+                "is_nullable": "NO",
+                "data_type": "mediumtext",
+                "character_maximum_length": "16777215",
+                "numeric_precision": null,
+                "collation_name": "utf8_bin",
+                "column_type": "mediumtext",
+                "column_default": null,
+                "extra": ""
+            }
         ]
     },
     "indexes": {
